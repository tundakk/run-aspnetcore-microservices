// <auto-generated />
using System;
using EmailIntelligence.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmailIntelligence.Infrastructure.Migrations
{
    [DbContext(typeof(EmailIntelligenceDbContext))]
    [Migration("20250626100201_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.EmailDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GeneratedContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("generated_content");

                    b.Property<double>("GenerationConfidence")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_score");

                    b.Property<Guid>("ProcessedEmailId")
                        .HasColumnType("uuid")
                        .HasColumnName("processed_email_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string[]>("UserEditTypes")
                        .HasColumnType("text[]")
                        .HasColumnName("edit_types");

                    b.Property<string>("UserEditedContent")
                        .HasColumnType("text")
                        .HasColumnName("edited_content");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedEmailId");

                    b.ToTable("email_drafts", (string)null);
                });

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.EmailEmbedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_id");

                    b.Property<float[]>("Embedding")
                        .IsRequired()
                        .HasColumnType("real[]")
                        .HasColumnName("embedding");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ContentType")
                        .HasDatabaseName("ix_email_embeddings_content_type");

                    b.HasIndex("EmailId")
                        .HasDatabaseName("ix_email_embeddings_email_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_embeddings_user_id");

                    b.ToTable("email_embeddings", (string)null);
                });

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.LearningPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_score");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("ModifiedContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modified_content");

                    b.Property<string>("OriginalContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_content");

                    b.Property<string>("PatternType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pattern_type");

                    b.Property<float[]>("SemanticDifference")
                        .IsRequired()
                        .HasColumnType("real[]")
                        .HasColumnName("semantic_difference");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ConfidenceScore")
                        .HasDatabaseName("ix_learning_patterns_confidence_score");

                    b.HasIndex("PatternType")
                        .HasDatabaseName("ix_learning_patterns_pattern_type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_learning_patterns_user_id");

                    b.ToTable("learning_patterns", (string)null);
                });

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.ProcessedEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionItems")
                        .HasColumnType("text")
                        .HasColumnName("action_items");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_score");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_id");

                    b.Property<string[]>("ExtractedKeywords")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("keywords");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<bool>("RequiresResponse")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_response");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipients");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("processed_emails", (string)null);
                });

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.UserToneProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("ConfidenceLevel")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_level");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ToneCharacteristics")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tone_characteristics");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("user_tone_profiles", (string)null);
                });

            modelBuilder.Entity("EmailIntelligence.Domain.Entities.EmailDraft", b =>
                {
                    b.HasOne("EmailIntelligence.Domain.Entities.ProcessedEmail", "ProcessedEmail")
                        .WithMany()
                        .HasForeignKey("ProcessedEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedEmail");
                });
#pragma warning restore 612, 618
        }
    }
}
